// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: acme/logger/server/v1/server.proto

package serverv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServerLoggerService_Add_FullMethodName     = "/acme.logger.server.v1.ServerLoggerService/Add"
	ServerLoggerService_GetList_FullMethodName = "/acme.logger.server.v1.ServerLoggerService/GetList"
	ServerLoggerService_Delete_FullMethodName  = "/acme.logger.server.v1.ServerLoggerService/Delete"
)

// ServerLoggerServiceClient is the client API for ServerLoggerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerLoggerServiceClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type serverLoggerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServerLoggerServiceClient(cc grpc.ClientConnInterface) ServerLoggerServiceClient {
	return &serverLoggerServiceClient{cc}
}

func (c *serverLoggerServiceClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, ServerLoggerService_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverLoggerServiceClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, ServerLoggerService_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverLoggerServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, ServerLoggerService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerLoggerServiceServer is the server API for ServerLoggerService service.
// All implementations must embed UnimplementedServerLoggerServiceServer
// for forward compatibility
type ServerLoggerServiceServer interface {
	Add(context.Context, *AddRequest) (*AddResponse, error)
	GetList(context.Context, *GetListRequest) (*GetListResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedServerLoggerServiceServer()
}

// UnimplementedServerLoggerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServerLoggerServiceServer struct {
}

func (UnimplementedServerLoggerServiceServer) Add(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedServerLoggerServiceServer) GetList(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedServerLoggerServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedServerLoggerServiceServer) mustEmbedUnimplementedServerLoggerServiceServer() {}

// UnsafeServerLoggerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerLoggerServiceServer will
// result in compilation errors.
type UnsafeServerLoggerServiceServer interface {
	mustEmbedUnimplementedServerLoggerServiceServer()
}

func RegisterServerLoggerServiceServer(s grpc.ServiceRegistrar, srv ServerLoggerServiceServer) {
	s.RegisterService(&ServerLoggerService_ServiceDesc, srv)
}

func _ServerLoggerService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerLoggerServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerLoggerService_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerLoggerServiceServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerLoggerService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerLoggerServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerLoggerService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerLoggerServiceServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerLoggerService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerLoggerServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerLoggerService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerLoggerServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerLoggerService_ServiceDesc is the grpc.ServiceDesc for ServerLoggerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerLoggerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "acme.logger.server.v1.ServerLoggerService",
	HandlerType: (*ServerLoggerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _ServerLoggerService_Add_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _ServerLoggerService_GetList_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ServerLoggerService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "acme/logger/server/v1/server.proto",
}
